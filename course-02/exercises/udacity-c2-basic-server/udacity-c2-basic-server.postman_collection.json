{
	"info": {
		"_postman_id": "771798f4-ac4c-469b-9487-a68129081c29",
		"name": "udacity-c2-basic-server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "exercise",
			"item": [
				{
					"name": "/cars all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"The array has cars\", function() {",
									"    arr = pm.response.json()",
									"",
									"    arr.forEach((x) => {",
									"        pm.expect(x).to.be.an('object');",
									"        pm.expect(x.hasOwnProperty('make')).to.be.true;",
									"        pm.expect(x.hasOwnProperty('type')).to.be.true;",
									"        pm.expect(x.hasOwnProperty('model')).to.be.true;",
									"        pm.expect(x.hasOwnProperty('cost')).to.be.true;",
									"        pm.expect(x.hasOwnProperty('id')).to.be.true;",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8082/cars/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"cars",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/cars filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"The array has cars of specific make\", function() {",
									"    arr = pm.response.json()",
									"",
									"    var query = {};",
									"    pm.request.url.query.all().forEach((p) => { query[p.key] = p.value});",
									"",
									"    arr.forEach((x) => {",
									"        pm.expect(x).to.be.an('object');",
									"        pm.expect(x['make'] === query['make']).to.be.true;",
									"        pm.expect(x.hasOwnProperty('type')).to.be.true;",
									"        pm.expect(x.hasOwnProperty('model')).to.be.true;",
									"        pm.expect(x.hasOwnProperty('cost')).to.be.true;",
									"        pm.expect(x.hasOwnProperty('id')).to.be.true;",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8082/cars/?make=toyota",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"cars",
								""
							],
							"query": [
								{
									"key": "make",
									"value": "toyota"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/cars by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is an object or string\", function () {",
									"    const id = pm.request.url.path[1];",
									"    if (pm.response.code === 200){",
									"        pm.expect(pm.response.json()).to.be.an('object');",
									"    } else {",
									"        pm.expect(pm.response.text()).to.be.an('string');",
									"        pm.expect(pm.response.text()).to.include(`Car with id(${id}) not found`);",
									"    }",
									"});",
									"",
									"pm.test(\"The array is a car\", function() {",
									"    car = pm.response.json();",
									"",
									"    if (pm.response.code === 200) {",
									"        pm.expect(car).to.be.an('object');",
									"        pm.expect(car.hasOwnProperty('type')).to.be.true;",
									"        pm.expect(car.hasOwnProperty('model')).to.be.true;",
									"        pm.expect(car.hasOwnProperty('cost')).to.be.true;",
									"        pm.expect(car.hasOwnProperty('id')).to.be.true;",
									"    }",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8082/cars/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"cars",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "/cars by id (existing car)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/cars/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"cars",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "65"
								},
								{
									"key": "ETag",
									"value": "W/\"41-ZXDTNjsb9FC1J9XKd8h5nlCy9Cs\""
								},
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 16:07:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"make\": \"toyota\",\n    \"type\": \"sedan\",\n    \"model\": \"prius\",\n    \"cost\": 22,\n    \"id\": 2\n}"
						},
						{
							"name": "/cars by id (no car with id)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8082/cars/2000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"cars",
										"2000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "27"
								},
								{
									"key": "ETag",
									"value": "W/\"1b-waQLD35YRGPqfFu1Fjo0v88NGE0\""
								},
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 16:21:13 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "Car with id(2000) not found"
						}
					]
				},
				{
					"name": "/cars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has request body values\", function () {",
									"    const { id, make, type, model, cost } = JSON.parse(pm.request.body);",
									"",
									"    const { id:resId, make:resMake, type:resType, model:resModel, cost:resCost } = pm.response.json();",
									"",
									"    pm.expect(id === resId).to.be.true;",
									"    pm.expect(make === resMake).to.be.true;",
									"    pm.expect(type === resType).to.be.true;",
									"    pm.expect(model === resModel).to.be.true;",
									"    pm.expect(cost === resCost).to.be.true;",
									"});",
									"",
									"pm.test(\"Body is added to cars\", function () {",
									"    const { id, make, type, model, cost } = JSON.parse(pm.request.body);",
									"    ",
									"    pm.sendRequest(`http://localhost:8082/cars/${id}`, (_, response) => {",
									"        car = response.json();",
									"        pm.expect(car).to.be.an('object');",
									"        pm.expect(car.hasOwnProperty('type')).to.be.true;",
									"        pm.expect(car.hasOwnProperty('model')).to.be.true;",
									"        pm.expect(car.hasOwnProperty('cost')).to.be.true;",
									"        pm.expect(car.hasOwnProperty('id')).to.be.true;",
									"",
									"        pm.expect(id === car.id).to.be.true;",
									"        pm.expect(make === car.make).to.be.true;",
									"        pm.expect(type === car.type).to.be.true;",
									"        pm.expect(model === car.model).to.be.true;",
									"        pm.expect(cost === car.cost).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"make\": \"ford\",\n    \"type\": \"sedan\",\n    \"model\": \"focus\",\n    \"cost\": 12,\n    \"id\": 9\n}"
						},
						"url": {
							"raw": "http://localhost:8082/cars",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"cars"
							]
						}
					},
					"response": [
						{
							"name": "/cars",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"make\": \"ford\",\n    \"type\": \"sedan\",\n    \"model\": \"focus\",\n    \"cost\": 12,\n    \"id\": 9\n}"
								},
								"url": {
									"raw": "http://localhost:8082/cars",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"cars"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "63"
								},
								{
									"key": "ETag",
									"value": "W/\"3f-Gq7L5Fy4IPcSjvkr7ojtzgniwB4\""
								},
								{
									"key": "Date",
									"value": "Fri, 10 Jun 2022 17:11:40 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"make\": \"ford\",\n    \"type\": \"sedan\",\n    \"model\": \"focus\",\n    \"cost\": 12,\n    \"id\": 9\n}"
						}
					]
				}
			]
		},
		{
			"name": "http://localhost:8082/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Welcome to the Cloud!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:8082/persons/george",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(`Welcome to the Cloud, george!`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/persons/:name",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"persons",
						":name"
					],
					"variable": [
						{
							"key": "name",
							"value": "george"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:8082/persons/:name Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    var query = {};",
							"    pm.request.url.query.all().forEach((p) => { query[p.key] = p.value});",
							"    ",
							"    pm.expect(pm.response.text()).to.include(`Welcome to the Cloud, ${query['name']}!`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/persons?name=george",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"persons"
					],
					"query": [
						{
							"key": "name",
							"value": "george"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:8082/persons/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(`Welcome to the Cloud, james!`);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"james\"\n}"
				},
				"url": {
					"raw": "http://localhost:8082/persons",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"persons"
					]
				}
			},
			"response": []
		},
		{
			"name": "400 http://localhost:8082/persons/:name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/persons/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"persons",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "endpoint",
			"value": "http://localhost:8082",
			"type": "string"
		}
	]
}